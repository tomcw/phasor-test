;license:MIT
;(c) 2022 by Tom Charlesworth
;
; 6522 related
;

;------------------------------------------------------------------------------

Detect6522
; Pre: X=slot#
; Post: X=slot#

	jsr		SetMBBase

	; 6522's IER.b7 is always 1
	; . Due to floating bus (and the visible TEXT screen being mainly $A0 values), then empty slots will likely pass this IER.b7 check
	ldy		#SY6522_A_BASE+SY6522_IER
	lda		(MBBase),y
	bmi		@check_A
	rts

@check_A
	ldy		#SY6522_A_BASE+SY6522_TIMER2L_COUNTER
	jsr		@Check6522
	bne		+
		inc		slotInfo,x	; bit0=1
+

@check_B
	ldy		#SY6522_B_BASE+SY6522_TIMER2L_COUNTER
	jsr		@Check6522
	bne		+
		inc		slotInfo,x
		inc		slotInfo,x	; bit1=1
+

	rts

	;

@Check6522
; Pre: Y = SY6522_TIMER2L_COUNTER for chip A or B
; 	NB. Checking with T2 is more robust than with T1, as there's no latch
; Post: Z=1(OK), Z=0(NG)
	lda		#4				; try 4 checks (avoid floating bus giving a false-positive)
	sta		zpTmp1
	lda		#1				; failures (can have 1 failure)
	sta		zpTmp2
-		jsr		SF_GetTimerL
		beq		+
			dec		zpTmp2
			bmi		++
+		dec		zpTmp1
		bne		-
++	rts

	;

SF_GetTimerL				; Based on Skyfox's detection code (but uses T2 instead of T1)
; Pre: Y = SY6522_TIMER2L_COUNTER for chip A or B
;	MBBaseL=$00 (whether checking chip A or B)
; Post: Z=1(OK), Z=0(NG)
	lda		(MBBase),y
	cmp		MBBaseL			; 3cy, C=1 since A>=0 as (MBBaseL) == 0x00
	sbc		(MBBase),y		; 5cy
	cmp		#$08
	beq		+
	cmp		#$09			; FASTChip //e (Ref: https://github.com/a2-4am/4cade)
+	rts

;------------------------------------------------------------------------------

Check6522
; Pre: X=slot#
; Post: C=0(OK), C=1(NG)
;	errorActual, errorExpected

	jsr		SetMBBase

	lda		slotInfo,x
	and		#3							; just 6522's
	sta		zpTmp1

	lda		#COMPONENT_6522+0			; test component $10
	sta		testComponentNum

	lda		#0
	sta		testNum						; test #00
	jsr		Check6522Datalines
	bcs		@error

	inc		testNum						; test #01
	jsr		Check6522Datalines2
	bcs		@error

	inc		testNum						; test #02
	jsr		Check6522Addrlines
	bcs		@error

	inc		testNum						; test #03
	jsr		Check6522IRQ
	bcs		@error
	rts		; C=0(OK)

@error
; Pre: X = expected value
;	A = actual value
; Post: C=1(NG)

	sta		errorActual
	stx		errorExpected

	sec		; C=1(NG)
	rts

;------------------

Check6522Datalines
; Pre: zpTmp1 = slotInfo[slot]
; Post: C=0(OK), C=1(NG)
;	On C=1: X=expected, A=actual
; Uses: zpTmp2, zpTmp3

!if 0 {
	; Just return OK if same 6522 is mapped to both $00 and $80
	jsr		DetectMB4CorEchoPlus
	beq		+
		clc
		rts
+
}

	;
	; Check r/w of all 8 data lines
	; . NB. Check 6522-A interleaved with 6522-B (doesn't work with a single 6522 mapped at both $00 and $80)
	; (NB. my real Phasor occasionally powers-on with r/w to 2nd 6522's DDRA with b7=1!)
	;
	;                 1st loop  2nd loop
	; 6522-A:  DDRB =   $55       $AA
	; 6522-A:  DDRA =   $AA       $55
	; 6522-B:  DDRB =   $69       $96
	; 6522-B:  DDRA =   $96       $69
	; check A: DDRB ==  $55       $AA
	; check A: DDRA ==  $AA       $55
	; check B: DDRB ==  $69       $96
	; check B: DDRA ==  $96       $69

	jsr		resetSubTestMinus1

	lda		#0
	sta		zpTmp2

@loop
		jsr		incSubTestNum			; subTest #0,1 (for 1st/2nd loop)

;@6522_A_w
		lda		zpTmp1
		and		#HAS_6522A
		beq		@6522_B_w

		ldy		#SY6522_A_BASE+SY6522_DDRB
		lda		#$55
		eor		zpTmp2
		sta		(MBBase),y
		lda		#$aa
		eor		zpTmp2
		iny								; Y=SY6522_DDRA
		sta		(MBBase),y

@6522_B_w
		lda		zpTmp1
		and		#HAS_6522B
		beq		@6522_A_r

		ldy		#SY6522_B_BASE+SY6522_DDRB
		lda		#$69
		eor		zpTmp2
		sta		(MBBase),y
		lda		#$96
		eor		zpTmp2
		iny								; Y=SY6522_DDRA
		sta		(MBBase),y

@6522_A_r
		lda		zpTmp1
		and		#HAS_6522A
		beq		@6522_B_r

		ldy		#SY6522_A_BASE+SY6522_DDRB
		lda		#$55
		eor		zpTmp2
		jsr		@check
		bne		@6522_err
		lda		#$aa
		eor		zpTmp2
		iny								; Y=SY6522_DDRA
		jsr		@check
		bne		@6522_err

@6522_B_r
		lda		zpTmp1
		and		#HAS_6522B
		beq		@next

		ldy		#SY6522_B_BASE+SY6522_DDRB
		lda		#$69
		eor		zpTmp2
		jsr		@check
		bne		@6522_err
		lda		#$96
		eor		zpTmp2
		iny								; Y=SY6522_DDRA
		jsr		@check
		bne		@6522_err

@next
	lda		#$ff
	eor		zpTmp2
	sta		zpTmp2
	bne		@loop

;@6522_ok
	clc
	rts

@6522_err
; Pre: zpTmp3 = expected value
;	A = actual value
; Post: C=1(NG)
	ldx		zpTmp3
	sec
	rts

;

@check
	sta		zpTmp3						; expected
	lda		(MBBase),y					; actual
	cmp		zpTmp3
	rts

;------------------

Check6522Datalines2
; Pre: zpTmp1 = slotInfo[slot]
; Post: C=0(OK), C=1(NG)
;	On C=1: X=expected, A=actual
; Uses: zpTmp2, zpTmp3

	;
	; Check r/w of all 8 data lines
	; . NB. Check 6522-A first, then 6522-B (ie. don't interleave - so that it works with a single 6522 mapped at both $00 and $80)
	;
	; loop n = {0,1,...$ff}
	;   6522-A:  DDRB =   n
	;   6522-A:  DDRA =   ~DDRB
	;   check A: DDRB =   n
	;   check A: DDRA =   ~DDRB
	;   6522-B:  DDRB =   n
	;   6522-B:  DDRA =   ~DDRB
	;   check B: DDRB =   n
	;   check B: DDRA =   ~DDRB
	;

	jsr		resetSubTest					; subTest #0 (for 6522-A)
	ldy		#SY6522_A_BASE+SY6522_DDRB

	lda		#0
	sta		zpTmp2

	lda		zpTmp1
	and		#HAS_6522A
	beq		@next6522

@6522_w		lda		zpTmp2
			sta		(MBBase),y
			iny								; Y=SY6522_DDRA
			eor		#$ff
			sta		(MBBase),y

@6522_r		dey								; Y=SY6522_DDRB
			lda		zpTmp2
			jsr		@check
			bne		@6522_err
			iny								; Y=SY6522_DDRA
			lda		zpTmp2
			eor		#$ff
			jsr		@check
			bne		@6522_err
			dey								; Y=SY6522_DDRB

@next	inc		zpTmp2
		bne		@6522_w

@next6522
		tya
		bmi		@6522_ok

		ldy		#SY6522_B_BASE+SY6522_DDRB
		jsr		incSubTestNum				; subTest #1 (for 6522-B)

		lda		zpTmp1
		and		#HAS_6522B
		bne		@6522_w

@6522_ok
	clc
	rts

@6522_err
; Pre: zpTmp3 = expected value
;	A = actual value
; Post: C=1(NG)
	ldx		zpTmp3
	sec
	rts

;

@check
	sta		zpTmp3						; expected
	lda		(MBBase),y					; actual
	cmp		zpTmp3
	rts

;------------------

Check6522Addrlines
; Pre: zpTmp1 = slotInfo[slot]
; Post: C=0(OK), C=1(NG)
;	On C=1: X=expected, A=actual

	jsr		resetSubTest				; subTest #0 (for 6522 at $Cn00)

	cli									; No ints generated by this routine, so safe to enable ints
										; Since IRQ/NMI handler hasn't been setup yet, then any spurious ints will exit to Monitor

	lda		zpTmp1
	and		#HAS_6522A
	beq		@next

@loop
		; write
		lda		#$AA
		ldy		#SY6522_DDRA			; %0011 (a0)
		sta		(MBBase),y
		lda		#$55
		ldy		#SY6522_DDRB			; %0010 (a1)
		sta		(MBBase),y

		lda		#$69
		ldy		#SY6522_TIMER1H_LATCH	; %0111 (a2)
		sta		(MBBase),y
		lda		#IER_SET|IxR_TIMER1|IxR_TIMER2	; $E0
		ldy		#SY6522_IFR
		sta		(MBBase),y				; Clear any pending T1|T2 ints (just in case)
		ldy		#SY6522_IER				; %1110 (a3)
		sta		(MBBase),y				; NB. Writing IER with b7=1 will set the bits=1
		eor		#$ff
		sta		(MBBase),y				; NB. Writing IER with b7=0 will clear the bits=1

		; read
		lda		#$AA
		ldy		#SY6522_DDRA			; %0011 (a0)
		jsr		@check
		bne		@6522_err
		lda		#$55
		ldy		#SY6522_DDRB			; %0010 (a1)
		jsr		@check
		bne		@6522_err

		lda		#$69
		ldy		#SY6522_TIMER1H_LATCH	; %0111 (a2)
		jsr		@check
		bne		@6522_err
		lda		#IER_SET|IxR_TIMER1|IxR_TIMER2	; $E0
		ldy		#SY6522_IER				; %1110 (a3)
		jsr		@check					; NB. Reading IER always returns b7=1
		bne		@6522_err
		lda		#$7f
		sta		(MBBase),y				; IER=0

@next
	lda		zpTmp1
	and		#HAS_6522B
	beq		@6522_ok

	lda		MBBaseL
	bne		@6522_ok
	jsr		incSubTestNum				; subTest #1 (for 6522 at $Cn80)
	lda		#SY6522_B_BASE
	sta		MBBaseL
	bne		@loop

@6522_ok
	lda		#0
	sta		MBBaseL
	clc
	rts

@6522_err
; Pre: zpTmp3 = expected value
;	A = actual value
; Post: C=1(NG)
	ldx		#0
	stx		MBBaseL
	ldx		zpTmp3
	sec
	rts

;

@check
	sta		zpTmp3						; expected
	lda		(MBBase),y					; actual
	cmp		zpTmp3
	rts

;------------------

Check6522IRQ
; Pre: zpTmp1 = slotInfo[slot]
; Post: C=0(OK), C=1(NG)
;	On C=1: X=expected, A=actual

	;
	; Check interrupt line(s)
	;

	jsr		resetSubTest				; subTest #0,1 (for 6522 at $Cn00)

	sei

	lda		#<Check6522ISR
	ldx		#>Check6522ISR
	jsr		SetIrqNmiVectors

;@6522_A_int
	lda		zpTmp1
	and		#HAS_6522A
	beq		@6522_B_int

	lda		#0
	sta		isrNMIcount
	sta		isrIFR_A

	lda		#1
	ldy		#SY6522_A_BASE+SY6522_TIMER1L_COUNTER
	sta		(MBBase),y
	iny									; Y=SY6522_TIMER1H_COUNTER
	sta		(MBBase),y					; T1C=0x0101

	lda		#ACR_ONESHOT
	ldy		#SY6522_A_BASE+SY6522_ACR
	sta		(MBBase),y

	lda		#IER_SET|IxR_TIMER1
	ldy		#SY6522_A_BASE+SY6522_IER
	sta		(MBBase),y

	lda		#$f							; wait 0x304 cycles (and NMI may have occurred)
	jsr		myWAIT

	lda		isrNMIcount
	sta		isrNMIcount_A
	bne		+							; NMI occurred, so IFR.TIMER1 already cleared!

		ldy		#SY6522_A_BASE+SY6522_IFR	; subTest #0
		lda		#IxR_TIMER1
		and		(MBBase),y
		beq		@6522_err

		cli
		sei

		jsr		incSubTestNum			; subTest #1
		and		isrIFR_A
		beq		@6522_err

+
@6522_B_int
	lda		zpTmp1
	and		#HAS_6522B
	beq		@6522_ok

	lda		#2
	sta		subTestNum					; subTest #2,3 (for 6522 at $Cn80)

	lda		#0
	sta		isrNMIcount
	sta		isrIFR_B

	lda		#1
	ldy		#SY6522_B_BASE+SY6522_TIMER1L_COUNTER
	sta		(MBBase),y
	iny									; Y=SY6522_TIMER1H_COUNTER
	sta		(MBBase),y					; T1C=0x0101

	lda		#ACR_ONESHOT
	ldy		#SY6522_B_BASE+SY6522_ACR
	sta		(MBBase),y

	lda		#IER_SET|IxR_TIMER1
	ldy		#SY6522_B_BASE+SY6522_IER
	sta		(MBBase),y

	lda		#$f							; wait 0x304 cycles (and NMI may have occurred)
	jsr		myWAIT

	lda		isrNMIcount
	sta		isrNMIcount_B
	bne		+							; NMI occurred, so IFR.TIMER1 already cleared!

		ldy		#SY6522_B_BASE+SY6522_IFR	; subTest #2
		lda		#IxR_TIMER1
		and		(MBBase),y
		beq		@6522_err

		cli
		sei

		jsr		incSubTestNum			; subTest #3
		and		isrIFR_B
		beq		@6522_err

+
@6522_ok
	clc
	rts

@6522_err
	ldx		#IxR_TIMER1					; expected
	lda		#0							; actual
	sec
	rts

;------------------------------------------------------------------------------

Check6522ISR
; Pre:
;	6502 has pushed P
;	Apple ROM has stored A to $45 (not Apple //e ROM!)
;

	lda		zpTmp2
	sta		isrCopyA

	txa
	pha
	tya
	pha

	;------

	; Cope with the case where a single 6522 is mapped to both $00 and $80
	; . read IFR from both A & B, *before* clearing IFR
	; . otherwise reading & clear A first, means that B (read second) will always reads as 0.
	; NB. Needed for Check6522IRQ, eg. for EchoPlus

	ldy		#SY6522_A_BASE+SY6522_IFR
	lda		(MBBase),y
	sta		isrIFR_A

	ldy		#SY6522_B_BASE+SY6522_IFR
	lda		(MBBase),y
	sta		isrIFR_B

	sta		(MBBase),y					; clear 6522_B's IFR

	ldy		#SY6522_A_BASE+SY6522_IFR
	lda		isrIFR_A
	sta		(MBBase),y					; clear 6522_A's IFR

	;------

	pla
	tay
	pla
	tax

	lda		$45		; for Apple II/II+
	rti

;==============================================================================

Test6522
; Pre: has6522
; Post: C=0(OK), C=1(NG)
;	MBBaseL = $00
;	errorActual, errorExpected
; Uses: zpTmp1 (so don't use in sub-funcs)

	sei

	lda		#<Test6522ISR
	ldx		#>Test6522ISR
	jsr		SetIrqNmiVectors

	lda		#COMPONENT_6522+1	; test component $11
	sta		testComponentNum
	lda		#$ff
	sta		testNum				; test #$00

@loop	inc		testNum
		jsr		Test_1
		bcs		@error

		jsr		WaitT1OneShotUnderflow	; clear & disable any T1 ints
		jsr		WaitT2OneShotUnderflow	; clear & disable any T2 ints

		lda		MBBaseL
		eor		#$80
		sta		MBBaseL
		bne		@loop

	lda		#0
	sta		MBBaseL

	clc		; C=0(OK)
	rts

@error
; Pre: zpTmp2 = expected value
;	A = actual value
; Post: C=1(NG)

	sta		errorActual
	lda		zpTmp2
	sta		errorExpected

	lda		#0
	sta		MBBaseL

	sec		; C=1(NG)
	rts

;------------------------------------------------------------------------------

TEXTLINE3=$580
TEXTLINE4=$600

OK_OFFSET_H=0				; NB. big-endian!
OK_OFFSET_L=1
NG_OFFSET_H=3				; NB. big-endian!
NG_OFFSET_L=4

Test_1
; Pre:
; Post: C=0(OK), C=1(NG)
;

	lda		#$0B			; enough cycles for lda,ldx,ldy to complete without T2C_l underflowing
	ldy		#SY6522_TIMER2L_COUNTER
	sta		(MBBase),y		; T2L_l (latch)

	lda		MBBaseL
	ora		#SY6522_TIMER2H_COUNTER
	sta		@smc0+1
	sta		@smc1+1
	sta		@smc2+1
	lda		MBBaseH
	sta		@smc0+2
	sta		@smc1+2
	sta		@smc2+2

	lda		#0
	sta		zpTmp1			; loop: values {$00,$01,...$ff}
	sta		@count			; and repeat this 256 times

	lda		MBBaseL
	bne		+
		lda		#<TEXTLINE3
		ldx		#>TEXTLINE3
		bne		++
+		lda		#<TEXTLINE4
		ldx		#>TEXTLINE4
++	sta		zpTmpPtrL
	stx		zpTmpPtrH

	lda		#0
	ldy		#0
	sta		(zpTmpPtr),y
	iny
	sta		(zpTmpPtr),y
	iny
	iny
	sta		(zpTmpPtr),y
	iny
	sta		(zpTmpPtr),y
	lda		#' '+$80
	ldy		#2
	sta		(zpTmpPtr),y

@loop:	lda		zpTmp1
		ldy		#SY6522_TIMER2H_COUNTER
		sta		(MBBase),y		; T2C_h, T2L_l->T2C_l & start counter
@smc0	lda		$C000+SY6522_TIMER2H_COUNTER
@smc1	ldx		$C000+SY6522_TIMER2H_COUNTER
@smc2	ldy		$C000+SY6522_TIMER2H_COUNTER

		sta		@data+0
		stx		@data+1
		sty		@data+2

		lda		zpTmp1
		cmp		@data+0
		bne		@data_ng
		cmp		@data+1
		bne		@data_ng
		cmp		@data+2
		bne		@data_ng

		; data ok
		ldy		#OK_OFFSET_L
		bne		+
@data_ng
		ldy		#NG_OFFSET_L

+		clc
		lda		#1
		adc		(zpTmpPtr),y	; big-endian (lo)
		sta		(zpTmpPtr),y
		lda		#0
		dey
		adc		(zpTmpPtr),y	; big-endian (hi)
		sta		(zpTmpPtr),y

@next	inc		zpTmp1
		bne		+
		inc		@count
		beq		@done
+		jmp		@loop

@done
	lda		TEXTLINE3+NG_OFFSET_L
	sta		test1FailuresA+0	; store as little-endian
	lda		TEXTLINE3+NG_OFFSET_H
	sta		test1FailuresA+1

	lda		TEXTLINE4+NG_OFFSET_L
	sta		test1FailuresB+0	; store as little-endian
	lda		TEXTLINE4+NG_OFFSET_H
	sta		test1FailuresB+1

	clc		; C=0(OK)
	rts

;

@data
	!byte 0,0,0

@count
	!byte 0

;==============================================================================

WaitT1OneShotUnderflow
; Set to T1 one-shot mode, and wait for underflow to clear internal 6522 state

	sei

	lda		#IER_CLR|IxR_TIMER1
	ldy		#SY6522_IER
	sta		(MBBase),y				; Disable Timer1 IRQ (do here to prevent any NMI from firing)

	lda		#ACR_ONESHOT
	ldy		#SY6522_ACR
	sta		(MBBase),y				; T1 one-shot mode

	lda		#1						; Set T1C=T1L=$0101
	ldy		#SY6522_TIMER1L_COUNTER
	sta		(MBBase),y
	ldy		#SY6522_TIMER1H_COUNTER
	sta		(MBBase),y

	jsr		WaitT1Underflow

	lda		#IxR_TIMER1
	ldy		#SY6522_IFR
	sta		(MBBase),y				; Clear any Timer1 IRQ

	rts

WaitT1Underflow
	ldy		#SY6522_TIMER1H_COUNTER
-		lda		(MBBase),y			; wait $00nn
		bne		-
-		lda		(MBBase),y			; wait $NNnn, where T1L_h = NN (assume it's not $00!)
		beq		-
	rts

;--------------------------------------

WaitT2OneShotUnderflow
; (T2 only supports one-shot mode) and wait for underflow to clear internal 6522 state

	sei

	lda		#IER_CLR|IxR_TIMER2
	ldy		#SY6522_IER
	sta		(MBBase),y				; Disable Timer2 IRQ (do here to prevent any NMI from firing)

	lda		#1						; Set T2C=$0101
	ldy		#SY6522_TIMER2L_COUNTER
	sta		(MBBase),y
	ldy		#SY6522_TIMER2H_COUNTER
	sta		(MBBase),y

	jsr		WaitT2Underflow

	lda		#IxR_TIMER2
	ldy		#SY6522_IFR
	sta		(MBBase),y				; Clear any Timer2 IRQ

	rts

WaitT2Underflow
	ldy		#SY6522_TIMER2H_COUNTER
-		lda		(MBBase),y			; wait $00nn
		bne		-
-		lda		(MBBase),y			; wait $FFnn (as there's no T2L_h, then "after timing out, the counter will continue to decrement")
		beq		-
	rts

;------------------------------------------------------------------------------

Test6522ISR
; Pre:
;	6502 has pushed P
;	Apple ROM has stored A to $45 (not Apple //e ROM!)
;

	txa
	pha
	tya
	pha

	;------

	ldy		#SY6522_IFR
	lda		(MBBase),y
	sta		(MBBase),y
	sta		isrIFR

	lda		#1
	sta		isrFlag

	inc		isrCount

	;------

	pla
	tay
	pla
	tax

	lda		$45		; for Apple II/II+
	rti
